{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kyles\\\\Desktop\\\\Projects\\\\orderformsgfd\\\\client\\\\src\\\\CheckOrderPage.js\";\n//CheckOrderPage.js\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport moment from 'moment';\nimport './checkorder.css';\nconst serverUrl = 'http://localhost:3001';\nconst CheckOrderPage = ({\n  setCurrentPage\n}) => {\n  const [searchResults, setSearchResults] = useState([]); //sets the search results for the post dates of our data\n  const [searchButtonClick, setSearchButtonClick] = useState(false); //resets the dropdown for the search results to empty when date is selected\n\n  const [headDate, setHeadDate] = useState(''); //sets the date header\n\n  const [headText, setHeadText] = useState([]); //sets lables for table\n  const [itemInfo, setItemInfo] = useState([]); //all the item object information \n  // use states for editing the quantity in the table below\n  const [editingQuantityItem, setEditingQuantityItem] = useState(null); //sets the value of quantity that user wants to edit, also edits the state between having an input field or not\n  const [newItemQuantity, setNewItemQuantity] = useState(''); //sets the new value of item quantity\n  const [itemData, setItemData] = useState([]); // used to set the dates in the search bar\n  const [showQuantityMessage, setQuantityMessage] = useState(false); //success message after item quantity is saved\n\n  // use states for editing the status in the table below\n  const [editingStatusItem, setEditingStatusItem] = useState(null); //sets the value of status that user wants to edit, also edits the state between having an input field or not\n  const [selectedStatus, setSelectedStatus] = useState('sent'); //initialize the first state as sent so that user does not cause null issue when updating\n  const [showStatusMessage, setStatusMessage] = useState(false);\n  const setData = async () => {\n    //retrieves data\n    try {\n      const response = await axios.get(`${serverUrl}/orderforms/`);\n      setItemData(response.data); // Update the state with the response data\n    } catch (err) {\n      console.log(err);\n    }\n  };\n  useEffect(() => {\n    //calls set data when page is rendered\n    setData(); // \n  }, []);\n  const onSearch = () => {\n    // function for when search button is clicked\n\n    setSearchResults(searchButtonClick ? [] : itemData); //sets the search results bar with dates\n    setSearchButtonClick(!searchButtonClick); //resets the search button click\n  };\n  const groupByDate = data => {\n    //function that groups items by date in a dictionary\n\n    const grouped = {};\n    data.forEach(item => {\n      const date = moment(item.postDate).format('MMM/DD/YYYY'); //have to format the date because we do not want MM:ss\n      //format the date before showing output\n      if (grouped[date]) {\n        grouped[date].push(item); //groups items in a key value pair for all the dates with the same date\n      } else {\n        grouped[date] = [item];\n      }\n    });\n    return grouped; //returns the data grouped by its date\n  };\n  const groupedData = groupByDate(searchResults); //set the groupedData as dates in search results immediately as the page renders\n\n  const handleDateClicked = date => {\n    //handles the date that was clicked \n    console.log(\"Date clicked:\", date);\n    const headDate = moment(date, 'MMM/DD/YYYY').format('MMM DD, YYYY'); //format the dates to a more readable format in my opinion\n    setHeadDate(headDate); //set the date header\n\n    setSearchResults([]); //empty the search results\n    setSearchButtonClick(false); //reset search button\n    setItemInfo(groupedData[date]); //setst the items information to all the grouped data found within that date\n\n    setHeadText([\"Name\", \"Quantity\", \"Type\", \"Status\"]); //sets the headers for the table\n  };\n  const editItemQuantity = async (item, editingQuantityItem, newItemQuantity) => {\n    //edits the quantity, takes in our item object, the id (just to make sure), and the new quantity \n    try {\n      const updatedData = {\n        id: editingQuantityItem,\n        //set to item id\n        quantity: newItemQuantity //set to new quantity\n        // status: newItemStatus,\n      };\n      console.log(`Editing quantity of ${item.name}: id ${editingQuantityItem}`); //log to check what we edited\n      const response = await axios.put(`${serverUrl}/orderforms/${editingQuantityItem}`, {\n        items: [updatedData]\n      }); //send post order to the server\n      console.log('Console responded with:', JSON.stringify(response.data)); //receive the reponse and log it\n      item.quantity = newItemQuantity; //set the item quantity to new value after posting it, so when it is switched back to the field it displays that\n    } catch (err) {\n      if (err.response) {\n        // The request was made, but the server responded with a non-2xx status code\n        console.error('Server responded with error status:', err.response.status);\n        console.error('Response data:', err.response.data);\n      } else if (err.request) {\n        // The request was made but no response was received\n        console.error('No response received:', err.request);\n      } else {\n        // Something happened in setting up the request that triggered an error\n        console.error('Error setting up request:', err.message);\n      }\n    }\n  };\n  const editStatusValue = event => {\n    //sets the item status to whatever option they select\n    setSelectedStatus(event.target.value);\n    console.log(selectedStatus);\n  };\n  const editItemStatus = async (selectedStatus, item) => {\n    //sending new status to database\n    const updatedData = {\n      //initialize id and status\n      id: item.id,\n      status: selectedStatus\n    };\n    try {\n      //try to send to database\n      console.log(`Updating item ${item.id} with status ${selectedStatus}`);\n      const response = await axios.put(`${serverUrl}/orderforms/${item.id}`, {\n        items: [updatedData]\n      });\n      console.log('Console responded with:', JSON.stringify(response.data));\n      item.status = selectedStatus; //set the item quantity to new value after posting it, so when it is switched back to the field it displays that\n    } catch (err) {\n      if (err.response) {\n        // The request was made, but the server responded with a non-2xx status code\n        console.error('Server responded with error status:', err.response.status);\n        console.error('Response data:', err.response.data);\n      } else if (err.request) {\n        // The request was made but no response was received\n        console.error('No response received:', err.request);\n      } else {\n        // Something happened in setting up the request that triggered an error\n        console.error('Error setting up request:', err.message);\n      }\n    }\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    id: \"checkOrderBorder\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    id: \"containerCheckHeader\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    id: \"checkHeaderTitle\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 11\n    }\n  }, \"Check Order\"), /*#__PURE__*/React.createElement(\"div\", {\n    id: \"topnav\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: `checkOrderSearch ${searchButtonClick ? 'selected' : ''}`,\n    onClick: onSearch,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 15\n    }\n  }, \"Search\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"dropdown\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 15\n    }\n  }, Object.entries(groupedData).map(([date]) => /*#__PURE__*/React.createElement(\"div\", {\n    key: date,\n    className: \"dropdown-row\",\n    onClick: () => handleDateClicked(date),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 19\n    }\n  }, date)))), /*#__PURE__*/React.createElement(\"p\", {\n    id: \"dateHeaderContainer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 13\n    }\n  }, headDate), /*#__PURE__*/React.createElement(\"table\", {\n    id: \"checkItemsContainer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"thead\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 15\n    }\n  }, headText.map((label, index) => /*#__PURE__*/React.createElement(\"td\", {\n    key: index,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 19\n    }\n  }, \" \", /*#__PURE__*/React.createElement(\"p\", {\n    className: \"checkItemText\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 38\n    }\n  }, label))))), /*#__PURE__*/React.createElement(\"tbody\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 13\n    }\n  }, itemInfo.map(item =>\n  /*#__PURE__*/\n  //renders table row by row with an index on tr (because that renders each row but lets see what we can do)  \n  React.createElement(\"tr\", {\n    key: item.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"td\", {\n    key: `${item.id}_name`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    className: \"checkItemText\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 63\n    }\n  }, item.name)), /*#__PURE__*/React.createElement(\"td\", {\n    key: `${item.id}_quantity`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 17\n    }\n  }, editingQuantityItem !== item.id ?\n  /*#__PURE__*/\n  /* created a use state that when a button is clicked it takes the item.id and sets it to the editingQuantityItem then it switches the input field because editingQuantityItem is now equal to item.id (false) so we can swtich.*/\n  React.createElement(\"div\", {\n    id: \"quantityButtonUnselected\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"p\", {\n    id: \"editQuantityText\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 23\n    }\n  }, item.quantity), \" \", /*#__PURE__*/React.createElement(\"button\", {\n    id: \"quantityButtonOff\",\n    onClick: () => setEditingQuantityItem(item.id),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 23\n    }\n  }), \" \")) : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    id: \"quantityButtonSelected\",\n    className: showQuantityMessage ? \"successQuantMessageShown\" : \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 23\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    id: \"quantityTextField\",\n    type: \"number\",\n    placeholder: \"Quantity\",\n    value: newItemQuantity,\n    onChange: e => setNewItemQuantity(Math.max(0, parseInt(e.target.value))),\n    autoFocus: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 23\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    id: \"quantityButtonOn\",\n    onClick: () => setEditingQuantityItem(''),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 23\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    id: \"saveEditQuantity\",\n    onClick: () => {\n      editItemQuantity(item, editingQuantityItem, newItemQuantity);\n      setTimeout(() => {\n        setQuantityMessage(true);\n      }, 300);\n      setTimeout(() => {\n        setQuantityMessage(false);\n        setEditingQuantityItem('');\n      }, 2000);\n    },\n    disabled: !(newItemQuantity.trim !== '' && newItemQuantity > 0),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 23\n    }\n  }, \"Submit\"), showQuantityMessage && /*#__PURE__*/React.createElement(\"div\", {\n    id: \"animationQuantity\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 23\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    id: \"quantitySuccessMessage\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 51\n    }\n  }, \"Edit Successful!\"))))), /*#__PURE__*/React.createElement(\"td\", {\n    key: `${item.id}_type`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    className: \"checkItemText\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 47\n    }\n  }, item.type)), /*#__PURE__*/React.createElement(\"td\", {\n    key: `${item.id}_status`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 17\n    }\n  }, \" \", editingStatusItem !== item.id ?\n  /*#__PURE__*/\n  /* ternary operator  to switch between input field and displaying the value*/\n  React.createElement(\"div\", {\n    id: \"statusButtonUnselected\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"p\", {\n    className: `status-${item.status.toLowerCase()}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 23\n    }\n  }, item.status), /*#__PURE__*/React.createElement(\"button\", {\n    id: \"statusButtonOff\",\n    onClick: () => setEditingStatusItem(item.id),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 23\n    }\n  }))) : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    id: \"statusButtonSelected\",\n    className: showStatusMessage ? \"successMessageShown\" : \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"select\", {\n    id: \"statusSelect\",\n    value: selectedStatus,\n    onChange: editStatusValue,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 23\n    }\n  }, /*#__PURE__*/React.createElement(\"option\", {\n    className: \"statusSent\",\n    value: \"sent\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 23\n    }\n  }, \"sent\"), /*#__PURE__*/React.createElement(\"option\", {\n    className: \"statusInProgress\",\n    value: \"in-progress\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 23\n    }\n  }, \"in progress\"), /*#__PURE__*/React.createElement(\"option\", {\n    className: \"statusReceived\",\n    value: \"received\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 23\n    }\n  }, \"received\")), /*#__PURE__*/React.createElement(\"button\", {\n    id: \"statusButtonOn\",\n    onClick: () => setEditingStatusItem(''),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 23\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    id: \"saveEditStatus\",\n    onClick: () => {\n      editItemStatus(selectedStatus, item);\n      // setTimeout(() => {\n      // setStatusMessage(true);  \n      // }, 300);\n      // setTimeout(() => {\n      // setStatusMessage(false);\n      // setEditingStatusItem('')\n      // }, 2000)\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 23\n    }\n  }, \"Save\"), showStatusMessage && /*#__PURE__*/React.createElement(\"div\", {\n    id: \"animationStatus\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    id: \"statusSuccessMessage\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 51\n    }\n  }, \"Edit Successful!\")))))))))));\n};\nexport default CheckOrderPage;","map":{"version":3,"names":["React","useState","useEffect","axios","moment","serverUrl","CheckOrderPage","setCurrentPage","searchResults","setSearchResults","searchButtonClick","setSearchButtonClick","headDate","setHeadDate","headText","setHeadText","itemInfo","setItemInfo","editingQuantityItem","setEditingQuantityItem","newItemQuantity","setNewItemQuantity","itemData","setItemData","showQuantityMessage","setQuantityMessage","editingStatusItem","setEditingStatusItem","selectedStatus","setSelectedStatus","showStatusMessage","setStatusMessage","setData","response","get","data","err","console","log","onSearch","groupByDate","grouped","forEach","item","date","postDate","format","push","groupedData","handleDateClicked","editItemQuantity","updatedData","id","quantity","name","put","items","JSON","stringify","error","status","request","message","editStatusValue","event","target","value","editItemStatus","createElement","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","className","onClick","Object","entries","map","key","label","index","Fragment","type","placeholder","onChange","e","Math","max","parseInt","autoFocus","setTimeout","disabled","trim","toLowerCase"],"sources":["C:/Users/kyles/Desktop/Projects/orderformsgfd/client/src/CheckOrderPage.js"],"sourcesContent":["//CheckOrderPage.js\r\nimport React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport moment from 'moment';\r\nimport './checkorder.css';\r\nconst serverUrl = 'http://localhost:3001';\r\n\r\n\r\nconst CheckOrderPage = ({ setCurrentPage }) => {\r\n  const[searchResults, setSearchResults] = useState([]); //sets the search results for the post dates of our data\r\n  const[searchButtonClick, setSearchButtonClick] = useState(false); //resets the dropdown for the search results to empty when date is selected\r\n  \r\n  const[headDate, setHeadDate] = useState(''); //sets the date header\r\n\r\n  const[headText, setHeadText] = useState([]); //sets lables for table\r\n  const[itemInfo, setItemInfo] = useState([]); //all the item object information \r\n  // use states for editing the quantity in the table below\r\n  const[editingQuantityItem, setEditingQuantityItem] = useState(null); //sets the value of quantity that user wants to edit, also edits the state between having an input field or not\r\n  const[newItemQuantity, setNewItemQuantity] = useState(''); //sets the new value of item quantity\r\n  const[itemData, setItemData] = useState([]); // used to set the dates in the search bar\r\n  const[showQuantityMessage, setQuantityMessage] = useState(false); //success message after item quantity is saved\r\n\r\n  // use states for editing the status in the table below\r\n  const[editingStatusItem, setEditingStatusItem] = useState(null); //sets the value of status that user wants to edit, also edits the state between having an input field or not\r\n  const[selectedStatus, setSelectedStatus] = useState('sent');//initialize the first state as sent so that user does not cause null issue when updating\r\n  const[showStatusMessage, setStatusMessage] = useState(false);\r\n\r\n  const setData = async () => { //retrieves data\r\n    try {\r\n      const response = await axios.get(`${serverUrl}/orderforms/`);\r\n      setItemData(response.data); // Update the state with the response data\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n  useEffect(() => { //calls set data when page is rendered\r\n    setData(); // \r\n  }, []);\r\n\r\n  const onSearch = () => { // function for when search button is clicked\r\n\r\n    setSearchResults(searchButtonClick ? [] : itemData); //sets the search results bar with dates\r\n    setSearchButtonClick(!searchButtonClick); //resets the search button click\r\n  };\r\n  \r\n  const groupByDate = (data) => { //function that groups items by date in a dictionary\r\n\r\n    const grouped = {};\r\n\r\n    data.forEach((item) => {\r\n      const date = moment(item.postDate).format('MMM/DD/YYYY') //have to format the date because we do not want MM:ss\r\n      //format the date before showing output\r\n      if (grouped[date]) {\r\n        grouped[date].push(item); //groups items in a key value pair for all the dates with the same date\r\n      } else{\r\n        grouped[date] = [item]\r\n      }\r\n    });\r\n    return grouped; //returns the data grouped by its date\r\n  }\r\n  const groupedData = groupByDate(searchResults); //set the groupedData as dates in search results immediately as the page renders\r\n  \r\n\r\n  const handleDateClicked = (date) => { //handles the date that was clicked \r\n    console.log(\"Date clicked:\", date);\r\n\r\n    const headDate = moment(date, 'MMM/DD/YYYY').format('MMM DD, YYYY')//format the dates to a more readable format in my opinion\r\n    setHeadDate(headDate);//set the date header\r\n    \r\n    setSearchResults([]); //empty the search results\r\n    setSearchButtonClick(false); //reset search button\r\n    setItemInfo(groupedData[date]); //setst the items information to all the grouped data found within that date\r\n\r\n    setHeadText([\"Name\", \"Quantity\", \"Type\", \"Status\"]); //sets the headers for the table\r\n  };\r\n\r\n  const editItemQuantity = async (item, editingQuantityItem, newItemQuantity) => { //edits the quantity, takes in our item object, the id (just to make sure), and the new quantity \r\n    try {\r\n      const updatedData = {\r\n          id: editingQuantityItem, //set to item id\r\n          quantity: newItemQuantity, //set to new quantity\r\n          // status: newItemStatus,\r\n      };\r\n      console.log(`Editing quantity of ${item.name}: id ${editingQuantityItem}`); //log to check what we edited\r\n      const response = await axios.put(`${serverUrl}/orderforms/${editingQuantityItem}`, { items: [updatedData] }); //send post order to the server\r\n      console.log('Console responded with:',JSON.stringify(response.data)); //receive the reponse and log it\r\n      item.quantity = newItemQuantity; //set the item quantity to new value after posting it, so when it is switched back to the field it displays that\r\n      \r\n  } catch(err) {\r\n    if (err.response) {\r\n      // The request was made, but the server responded with a non-2xx status code\r\n      console.error('Server responded with error status:', err.response.status);\r\n      console.error('Response data:', err.response.data);\r\n  } else if (err.request) {\r\n      // The request was made but no response was received\r\n      console.error('No response received:', err.request);\r\n  } else {\r\n      // Something happened in setting up the request that triggered an error\r\n      console.error('Error setting up request:', err.message);\r\n  }\r\n  }\r\n  }\r\n  const editStatusValue = (event) => { //sets the item status to whatever option they select\r\n    setSelectedStatus(event.target.value);\r\n    console.log(selectedStatus)\r\n  };\r\n\r\n  const editItemStatus = async (selectedStatus, item) => { //sending new status to database\r\n    const updatedData = { //initialize id and status\r\n      id: item.id,\r\n      status: selectedStatus,\r\n    }\r\n    try { //try to send to database\r\n      console.log(`Updating item ${item.id} with status ${selectedStatus}`)\r\n      const response = await axios.put(`${serverUrl}/orderforms/${item.id}`, { items: [updatedData] });\r\n      console.log('Console responded with:',JSON.stringify(response.data));\r\n      item.status = selectedStatus; //set the item quantity to new value after posting it, so when it is switched back to the field it displays that\r\n\r\n    } catch(err){\r\n\r\n      if (err.response) {\r\n        // The request was made, but the server responded with a non-2xx status code\r\n        console.error('Server responded with error status:', err.response.status);\r\n        console.error('Response data:', err.response.data);\r\n    } else if (err.request) {\r\n        // The request was made but no response was received\r\n        console.error('No response received:', err.request);\r\n    } else {\r\n        // Something happened in setting up the request that triggered an error\r\n        console.error('Error setting up request:', err.message);\r\n    }\r\n  }\r\n}\r\n\r\n  return (\r\n      <div id=\"checkOrderBorder\">\r\n        <div id=\"containerCheckHeader\">\r\n          <p id= \"checkHeaderTitle\">Check Order</p>  \r\n          <div id =\"topnav\">\r\n              <button className={`checkOrderSearch ${searchButtonClick ? 'selected' : ''}`} onClick={onSearch}>Search</button>\r\n              <div className=\"dropdown\">\r\n                {Object.entries(groupedData).map(([date]) => (\r\n                  <div \r\n                    key={date} \r\n                    className=\"dropdown-row\"\r\n                    onClick={() => handleDateClicked(date)}\r\n                    >\r\n                    {date}\r\n                  </div>\r\n                ))}\r\n              </div>\r\n          </div>\r\n            <p id=\"dateHeaderContainer\">{headDate}</p>\r\n          <table id=\"checkItemsContainer\">\r\n            <thead>\r\n              <tr>\r\n                {headText.map((label, index) => (\r\n                  <td key = {index}> <p className=\"checkItemText\">{label}</p></td>\r\n                ))} \r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {itemInfo.map((item) => (//renders table row by row with an index on tr (because that renders each row but lets see what we can do)  \r\n              <tr key={item.id}><td key = {`${item.id}_name`}><p className=\"checkItemText\">{item.name}</p></td> \r\n\r\n                <td key = {`${item.id}_quantity`}>\r\n                  {/*thought process is give the button a value tag with the id of the item so that when it is selected we can try to match the value of that button to where it is located in the table to edit only that text field*/}\r\n                    {editingQuantityItem !== item.id ? ( /* created a use state that when a button is clicked it takes the item.id and sets it to the editingQuantityItem then it switches the input field because editingQuantityItem is now equal to item.id (false) so we can swtich.*/\r\n                    <div id=\"quantityButtonUnselected\">\r\n                      <>\r\n                      <p id=\"editQuantityText\">{item.quantity}</p> {/*ternary operator to update the item quantity if necessary */}\r\n                      <button id=\"quantityButtonOff\" onClick={() => setEditingQuantityItem(item.id)}></button> {/*attach id of item to the button*/}\r\n                      </>\r\n                    </div> \r\n                    ) : (  \r\n                      <>\r\n                      <div id=\"quantityButtonSelected\" className={showQuantityMessage ? \"successQuantMessageShown\" : \"\"}>\r\n                      <input\r\n                      id=\"quantityTextField\"\r\n                      type=\"number\"\r\n                      placeholder='Quantity'\r\n                      value={newItemQuantity}\r\n                      onChange={(e) => setNewItemQuantity((Math.max(0, parseInt(e.target.value))))}\r\n                      autoFocus\r\n                      ></input>\r\n                      <button id=\"quantityButtonOn\" onClick={() => setEditingQuantityItem('')}></button> \r\n                      <button id=\"saveEditQuantity\"  \r\n                        onClick={() => {editItemQuantity(item, editingQuantityItem, newItemQuantity)\r\n                          setTimeout(() => {\r\n                            setQuantityMessage(true);\r\n                          }, 300);\r\n                          setTimeout(() => {\r\n                            setQuantityMessage(false);\r\n                            setEditingQuantityItem('');\r\n                          }, 2000)\r\n                        }} \r\n                        disabled={!(newItemQuantity.trim !== '' && newItemQuantity > 0)}\r\n                        >\r\n                        Submit\r\n                      </button>\r\n                      {showQuantityMessage && \r\n                      <div id=\"animationQuantity\"><p id=\"quantitySuccessMessage\">Edit Successful!</p></div>}\r\n                      </div>\r\n                      </>             \r\n                    )}          \r\n                </td>\r\n                <td key = {`${item.id}_type`}><p className=\"checkItemText\">{item.type}</p></td>  \r\n                <td key = {`${item.id}_status`}> {/* similar to the functionality of editing the quantity above */}\r\n                  {editingStatusItem !== item.id ? ( /* ternary operator  to switch between input field and displaying the value*/\r\n                    <div id=\"statusButtonUnselected\">\r\n                    <>\r\n                    {/* id=\"editStatusText\" */}\r\n                      <p className={`status-${item.status.toLowerCase()}`}>{item.status}</p>\r\n                      <button id=\"statusButtonOff\" onClick={() => setEditingStatusItem(item.id)}></button>\r\n                    </>\r\n                    </div>\r\n                  ) : (\r\n                    <>\r\n                    <div id=\"statusButtonSelected\" className={showStatusMessage ? \"successMessageShown\" : \"\"}>\r\n                      <select id=\"statusSelect\" value={selectedStatus} onChange={editStatusValue}>\r\n                      <option className=\"statusSent\" value=\"sent\">sent</option>\r\n                      <option className=\"statusInProgress\" value=\"in-progress\">in progress</option>\r\n                      <option className=\"statusReceived\" value=\"received\">received</option>\r\n                      </select>\r\n                      <button id=\"statusButtonOn\" onClick={() => setEditingStatusItem('')}></button> \r\n                      <button id=\"saveEditStatus\" onClick={() => {editItemStatus(selectedStatus, item)\r\n                        // setTimeout(() => {\r\n                        // setStatusMessage(true);  \r\n                        // }, 300);\r\n                        // setTimeout(() => {\r\n                        // setStatusMessage(false);\r\n                        // setEditingStatusItem('')\r\n                        // }, 2000)\r\n                        }} \r\n                       >Save</button>\r\n                       {showStatusMessage && \r\n                        <div id=\"animationStatus\"><p id=\"statusSuccessMessage\">Edit Successful!</p></div>}    \r\n                       </div>   \r\n                    </>           \r\n                  )} \r\n                </td>\r\n              </tr>\r\n              ))}\r\n            </tbody>\r\n          </table>                   \r\n        </div>\r\n      </div>\r\n      \r\n  );\r\n};\r\nexport default CheckOrderPage;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}