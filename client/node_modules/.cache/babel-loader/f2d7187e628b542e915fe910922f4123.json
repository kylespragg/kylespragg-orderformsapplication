{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kyles\\\\Desktop\\\\Projects\\\\orderformsgfd\\\\client\\\\src\\\\OrderHistoryPage.js\";\n//OrderHistoryPage.js\nimport React, { useState, useEffect } from 'react';\nimport moment from 'moment';\nimport axios from 'axios';\nimport './orderhistory.css';\nconst serverUrl = 'http://localhost:3001';\nconst OrderHistoryPage = ({\n  setCurrentPage\n}) => {\n  const [itemData, setItemData] = useState([]);\n  const [groupedData, setGroupedData] = useState([]);\n  const [pendingData, setPendingData] = useState([]);\n  const [receivedData, setReceivedData] = useState([]);\n  const [warningMessage, setWarningMessage] = useState(false); //warning message for clearing orders\n  const [deleteDate, setDeleteDate] = useState('');\n  const [successMessage, setSuccessMessage] = useState(false);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await axios.get(`${serverUrl}/orderforms/`);\n        setItemData(response.data);\n      } catch (err) {\n        console.log(err);\n      }\n    };\n    fetchData();\n  }, []);\n  useEffect(() => {\n    const groupByDate = {};\n    itemData.forEach(item => {\n      const date = moment(item.postDate).format('MMM/DD/YYYY'); //have to format the date because we do not want MM:ss\n      if (groupByDate[date]) {\n        groupByDate[date].push(item); //groups items in a key value pair for all the dates with the same date\n      } else {\n        groupByDate[date] = [item];\n      }\n    });\n    setGroupedData(groupByDate);\n    const receivedDataGroup = [];\n    const pendingDataGroup = [];\n    for (const [date, items] of Object.entries(groupByDate)) {\n      let allReceived = true;\n      let allSent = true;\n      let inProgress = false;\n      let count = 0;\n      let receivedAll = items.length;\n      for (const item of items) {\n        if (item.status === 'received') {\n          count += 1;\n        }\n        if (item.status === 'in-progress') {\n          inProgress = true;\n          allSent = false;\n          allReceived = false;\n          break; // Break out of the inner loop if any item is 'in progress'\n        }\n        if (count === receivedAll) {\n          allSent = false;\n          allReceived = true;\n        } else {\n          if (count > 0) {\n            // checks if there is one item that is marked \"received\" while the rest are sent --> order is in progress\n            inProgress = true;\n            allSent = false;\n          }\n          allReceived = false; // sets allReceived to false\n        }\n      }\n      if (allReceived === true) {\n        if (!receivedDataGroup.some(entry => entry.date === date)) {\n          console.log(date);\n          receivedDataGroup.push(date);\n        }\n      } else if (allSent === true) {\n        if (!pendingDataGroup.some(entry => entry.date === date)) {\n          pendingDataGroup.push({\n            date,\n            status: 'sent'\n          });\n        }\n      } else if (inProgress === true) {\n        if (!pendingDataGroup.some(entry => entry.date === date)) {\n          pendingDataGroup.push({\n            date,\n            status: 'in progress'\n          });\n        }\n      }\n    }\n    setPendingData(pendingDataGroup);\n    setReceivedData(receivedDataGroup);\n  }, [itemData]);\n  const clearOrderWarning = date => {\n    setWarningMessage(true);\n    setDeleteDate(date);\n  };\n  const handleCloseModal = () => {\n    setWarningMessage(false);\n  };\n  const handleConfirmClear = async () => {\n    await Promise.all(groupedData[deleteDate].map(async entry => {\n      console.log(entry);\n      try {\n        const response = await axios.delete(`${serverUrl}/orderforms/${entry.id}`);\n        console.log('Console responded with:', JSON.stringify(response.data));\n        // Handle deletion success or update local state accordingly\n      } catch (error) {\n        console.error('Error deleting entry:', error);\n        // Handle deletion error\n      }\n    }));\n    try {\n      const response = await axios.get(`${serverUrl}/orderforms/`);\n      setItemData(response.data); // Update itemData with the refreshed data\n    } catch (err) {\n      console.log(err);\n    }\n    setWarningMessage(false);\n    setSuccessMessage(true);\n    setTimeout(() => {\n      setSuccessMessage(false);\n    }, 2000);\n  };\n\n  // add functionality for the clear button --> add pop up window with warning message \"Are you sure?\" Yes/No --> axios.delete()\n  return /*#__PURE__*/React.createElement(\"div\", {\n    id: \"orderHistoryContainer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    id: \"orderHistoryText\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }\n  }, \"Order History\"), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"ordersText\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }\n  }, \"Pending Orders\"), /*#__PURE__*/React.createElement(\"table\", {\n    className: \"orderHistoryTable\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"thead\", {\n    className: \"divider-shadow\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"th\", {\n    className: \"headHistoryText\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 13\n    }\n  }, \"Date\"), /*#__PURE__*/React.createElement(\"th\", {\n    className: \"headHistoryText\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 13\n    }\n  }, \"Status\"), /*#__PURE__*/React.createElement(\"th\", {\n    className: \"clearOrderHeadText\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 13\n    }\n  }, \"Clear Order\"))), /*#__PURE__*/React.createElement(\"tbody\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 9\n    }\n  }, pendingData.map(({\n    date,\n    status\n  }) => /*#__PURE__*/React.createElement(\"tr\", {\n    key: date,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"td\", {\n    className: \"columnDateText\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 15\n    }\n  }, date), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"itemStatusText\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 17\n    }\n  }, status)), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: \"clearOrderText\",\n    onClick: () => clearOrderWarning(date),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 17\n    }\n  }, \"Clear\")))))), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"ordersText\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 7\n    }\n  }, \"Completed Orders\"), \" \", /*#__PURE__*/React.createElement(\"table\", {\n    className: \"orderHistoryTable\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"thead\", {\n    className: \"divider-shadow\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"th\", {\n    className: \"headHistoryText\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 13\n    }\n  }, \"Date\"), /*#__PURE__*/React.createElement(\"th\", {\n    className: \"headHistoryText\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 13\n    }\n  }, \"Status\"), /*#__PURE__*/React.createElement(\"th\", {\n    className: \"clearOrderHeadText\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 13\n    }\n  }, \"Clear Order\"))), /*#__PURE__*/React.createElement(\"tbody\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 9\n    }\n  }, receivedData.map(date => /*#__PURE__*/React.createElement(\"tr\", {\n    key: date,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"td\", {\n    className: \"columnDateText\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 15\n    }\n  }, date), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"itemStatusText\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 17\n    }\n  }, \"received\")), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: \"clearOrderText\",\n    onClick: () => clearOrderWarning(date),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 17\n    }\n  }, \"Clear\")))))), warningMessage && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"modal-overlay\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"modal-content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    className: \"deleteMessageText\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 13\n    }\n  }, \"Are you sure you want to clear the order?\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"modal-buttons\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: \"modal-button\",\n    onClick: handleConfirmClear,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 15\n    }\n  }, \"Yes\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"modal-button\",\n    onClick: handleCloseModal,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 15\n    }\n  }, \"No\")))), successMessage && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"modal-overlay\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"modal-content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    className: \"deleteMessageText\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 13\n    }\n  }, \"Order Successfuly Deleted!\"))));\n};\nexport default OrderHistoryPage;\n\n/* \r\nComplete clear button, ask dad if there is any other functionality needed/wanted\r\ncheck css styles, fix css media quries, check all warnings\r\nfigure out best course of action to live deploy\r\n*/","map":{"version":3,"names":["React","useState","useEffect","moment","axios","serverUrl","OrderHistoryPage","setCurrentPage","itemData","setItemData","groupedData","setGroupedData","pendingData","setPendingData","receivedData","setReceivedData","warningMessage","setWarningMessage","deleteDate","setDeleteDate","successMessage","setSuccessMessage","fetchData","response","get","data","err","console","log","groupByDate","forEach","item","date","postDate","format","push","receivedDataGroup","pendingDataGroup","items","Object","entries","allReceived","allSent","inProgress","count","receivedAll","length","status","some","entry","clearOrderWarning","handleCloseModal","handleConfirmClear","Promise","all","map","delete","id","JSON","stringify","error","setTimeout","createElement","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","className","key","onClick"],"sources":["C:/Users/kyles/Desktop/Projects/orderformsgfd/client/src/OrderHistoryPage.js"],"sourcesContent":["//OrderHistoryPage.js\r\nimport React, { useState, useEffect } from 'react';\r\nimport moment from 'moment';\r\nimport axios from 'axios';\r\nimport './orderhistory.css';\r\nconst serverUrl = 'http://localhost:3001';\r\n\r\nconst OrderHistoryPage = ({ setCurrentPage }) => {\r\n  const [itemData, setItemData] = useState([]);\r\n  const [groupedData, setGroupedData] = useState([]);\r\n  const [pendingData, setPendingData] = useState([]);\r\n  const [receivedData, setReceivedData] = useState([]);\r\n  const [warningMessage, setWarningMessage] = useState(false); //warning message for clearing orders\r\n  const [deleteDate, setDeleteDate] = useState('');\r\n  const [successMessage, setSuccessMessage] = useState(false);\r\n\r\n  useEffect (() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const response = await axios.get(`${serverUrl}/orderforms/`);\r\n        setItemData(response.data);\r\n      } catch (err) {\r\n        console.log(err);\r\n      }\r\n    };\r\n  \r\n    fetchData();\r\n  }, []);\r\n  useEffect (() => {\r\n      const groupByDate = {};\r\n      itemData.forEach((item) => {  \r\n        const date = moment(item.postDate).format('MMM/DD/YYYY') //have to format the date because we do not want MM:ss\r\n        if (groupByDate[date]) {\r\n          groupByDate[date].push(item); //groups items in a key value pair for all the dates with the same date\r\n        } else {\r\n          groupByDate[date] = [item]\r\n        }\r\n      });\r\n      setGroupedData(groupByDate);\r\n\r\n      const receivedDataGroup = [];\r\n      const pendingDataGroup = [];\r\n\r\n      for ( const [date, items] of Object.entries(groupByDate)) {\r\n        \r\n        let allReceived = true;\r\n        let allSent = true;\r\n        let inProgress = false;\r\n        let count = 0\r\n        let receivedAll = items.length\r\n        for (const item of items) {\r\n          if (item.status === 'received') {\r\n            count += 1;\r\n          }\r\n          if (item.status === 'in-progress') {\r\n            inProgress = true;\r\n            allSent = false;\r\n            allReceived = false;\r\n            break; // Break out of the inner loop if any item is 'in progress'\r\n          }\r\n          if (count === receivedAll) {\r\n            allSent = false;\r\n            allReceived = true;\r\n          } else {\r\n            if (count > 0) { // checks if there is one item that is marked \"received\" while the rest are sent --> order is in progress\r\n              inProgress = true;\r\n              allSent = false;\r\n            }\r\n            allReceived = false; // sets allReceived to false\r\n          }\r\n        }\r\n        if (allReceived === true) {\r\n          if (!receivedDataGroup.some(entry => entry.date === date)) {\r\n            console.log(date);\r\n            receivedDataGroup.push(date);\r\n          }\r\n        } else if (allSent === true) {\r\n            if (!pendingDataGroup.some(entry => entry.date === date )) {\r\n              pendingDataGroup.push({ date, status: 'sent' });\r\n            }\r\n        } else if (inProgress === true) {\r\n            if (!pendingDataGroup.some(entry => entry.date === date )) {\r\n              pendingDataGroup.push({ date, status: 'in progress' });\r\n            }\r\n        }   \r\n      }\r\n      setPendingData(pendingDataGroup);\r\n      setReceivedData(receivedDataGroup);\r\n    \r\n      \r\n    }, [itemData]);\r\n\r\n    const clearOrderWarning = (date) => {\r\n      setWarningMessage(true);\r\n      setDeleteDate(date);\r\n    }\r\n    const handleCloseModal = () => {\r\n      setWarningMessage(false);\r\n    };\r\n  \r\n    const handleConfirmClear = async () => {\r\n\r\n      await Promise.all(groupedData[deleteDate].map(async (entry) => {\r\n        console.log(entry);\r\n        try {\r\n          const response = await axios.delete(`${serverUrl}/orderforms/${entry.id}`);\r\n          console.log('Console responded with:',JSON.stringify(response.data));\r\n          // Handle deletion success or update local state accordingly\r\n        } catch (error) {\r\n          console.error('Error deleting entry:', error);\r\n          // Handle deletion error\r\n        }\r\n      }));\r\n      try {\r\n        const response = await axios.get(`${serverUrl}/orderforms/`);\r\n        setItemData(response.data); // Update itemData with the refreshed data\r\n      } catch (err) {\r\n        console.log(err);\r\n      }\r\n      setWarningMessage(false);\r\n      setSuccessMessage(true);\r\n      setTimeout(() => {\r\n        setSuccessMessage(false);\r\n      }, 2000);\r\n\r\n    };\r\n\r\n    // add functionality for the clear button --> add pop up window with warning message \"Are you sure?\" Yes/No --> axios.delete()\r\n  return (\r\n    <div id=\"orderHistoryContainer\">\r\n      <p id=\"orderHistoryText\">Order History</p>\r\n      <p className=\"ordersText\">Pending Orders</p>\r\n      <table className=\"orderHistoryTable\">\r\n        <thead className =\"divider-shadow\">\r\n          <tr>\r\n            <th className=\"headHistoryText\">Date</th>\r\n            <th className=\"headHistoryText\">Status</th>\r\n            <th className=\"clearOrderHeadText\">Clear Order</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {pendingData.map(( { date, status } ) => (\r\n            <tr key={date}>\r\n              <td className=\"columnDateText\">{date}</td>\r\n              <td>\r\n                <div className=\"itemStatusText\">{status}</div>\r\n              </td>\r\n              <td>\r\n                <button className=\"clearOrderText\" onClick={() => clearOrderWarning(date)}>Clear</button>\r\n              </td>\r\n            </tr>              \r\n          ))}\r\n        </tbody>\r\n      </table>\r\n\r\n      <p className=\"ordersText\">Completed Orders</p> {/* fix styling on this table --> offset */}\r\n      <table className=\"orderHistoryTable\">\r\n        <thead className=\"divider-shadow\">\r\n          <tr>\r\n            <th className=\"headHistoryText\">Date</th>\r\n            <th className=\"headHistoryText\">Status</th>\r\n            <th className=\"clearOrderHeadText\">Clear Order</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {receivedData.map((date) => (\r\n            <tr key={date}>\r\n              <td className=\"columnDateText\">{date}</td>\r\n              <td>\r\n                <div className=\"itemStatusText\">received</div>\r\n              </td>\r\n              <td>\r\n                <button className=\"clearOrderText\" onClick={() => clearOrderWarning(date)}>Clear</button>\r\n              </td>\r\n            </tr>              \r\n          ))}\r\n        </tbody>\r\n      </table>\r\n      {warningMessage && (\r\n        <div className=\"modal-overlay\">\r\n          <div className=\"modal-content\">\r\n            <h2 className=\"deleteMessageText\" >Are you sure you want to clear the order?</h2>\r\n            <div className=\"modal-buttons\">\r\n              <button className=\"modal-button\" onClick={handleConfirmClear}>Yes</button>\r\n              <button className=\"modal-button\" onClick={handleCloseModal}>No</button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {successMessage && (\r\n        <div className=\"modal-overlay\">\r\n          <div className=\"modal-content\">\r\n            <h2 className=\"deleteMessageText\">Order Successfuly Deleted!</h2>\r\n            </div>\r\n          </div>\r\n      )}\r\n  </div>\r\n  );  \r\n};\r\n\r\nexport default OrderHistoryPage;\r\n\r\n/* \r\nComplete clear button, ask dad if there is any other functionality needed/wanted\r\ncheck css styles, fix css media quries, check all warnings\r\nfigure out best course of action to live deploy\r\n*/"],"mappings":";AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,MAAM,MAAM,QAAQ;AAC3B,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAO,oBAAoB;AAC3B,MAAMC,SAAS,GAAG,uBAAuB;AAEzC,MAAMC,gBAAgB,GAAGA,CAAC;EAAEC;AAAe,CAAC,KAAK;EAC/C,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACS,WAAW,EAAEC,cAAc,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAACW,WAAW,EAAEC,cAAc,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAACa,YAAY,EAAEC,eAAe,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAACe,cAAc,EAAEC,iBAAiB,CAAC,GAAGhB,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;EAC7D,MAAM,CAACiB,UAAU,EAAEC,aAAa,CAAC,GAAGlB,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAACmB,cAAc,EAAEC,iBAAiB,CAAC,GAAGpB,QAAQ,CAAC,KAAK,CAAC;EAE3DC,SAAS,CAAE,MAAM;IACf,MAAMoB,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMnB,KAAK,CAACoB,GAAG,CAAE,GAAEnB,SAAU,cAAa,CAAC;QAC5DI,WAAW,CAACc,QAAQ,CAACE,IAAI,CAAC;MAC5B,CAAC,CAAC,OAAOC,GAAG,EAAE;QACZC,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC;MAClB;IACF,CAAC;IAEDJ,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,EAAE,CAAC;EACNpB,SAAS,CAAE,MAAM;IACb,MAAM2B,WAAW,GAAG,CAAC,CAAC;IACtBrB,QAAQ,CAACsB,OAAO,CAAEC,IAAI,IAAK;MACzB,MAAMC,IAAI,GAAG7B,MAAM,CAAC4B,IAAI,CAACE,QAAQ,CAAC,CAACC,MAAM,CAAC,aAAa,CAAC,EAAC;MACzD,IAAIL,WAAW,CAACG,IAAI,CAAC,EAAE;QACrBH,WAAW,CAACG,IAAI,CAAC,CAACG,IAAI,CAACJ,IAAI,CAAC,CAAC,CAAC;MAChC,CAAC,MAAM;QACLF,WAAW,CAACG,IAAI,CAAC,GAAG,CAACD,IAAI,CAAC;MAC5B;IACF,CAAC,CAAC;IACFpB,cAAc,CAACkB,WAAW,CAAC;IAE3B,MAAMO,iBAAiB,GAAG,EAAE;IAC5B,MAAMC,gBAAgB,GAAG,EAAE;IAE3B,KAAM,MAAM,CAACL,IAAI,EAAEM,KAAK,CAAC,IAAIC,MAAM,CAACC,OAAO,CAACX,WAAW,CAAC,EAAE;MAExD,IAAIY,WAAW,GAAG,IAAI;MACtB,IAAIC,OAAO,GAAG,IAAI;MAClB,IAAIC,UAAU,GAAG,KAAK;MACtB,IAAIC,KAAK,GAAG,CAAC;MACb,IAAIC,WAAW,GAAGP,KAAK,CAACQ,MAAM;MAC9B,KAAK,MAAMf,IAAI,IAAIO,KAAK,EAAE;QACxB,IAAIP,IAAI,CAACgB,MAAM,KAAK,UAAU,EAAE;UAC9BH,KAAK,IAAI,CAAC;QACZ;QACA,IAAIb,IAAI,CAACgB,MAAM,KAAK,aAAa,EAAE;UACjCJ,UAAU,GAAG,IAAI;UACjBD,OAAO,GAAG,KAAK;UACfD,WAAW,GAAG,KAAK;UACnB,MAAM,CAAC;QACT;QACA,IAAIG,KAAK,KAAKC,WAAW,EAAE;UACzBH,OAAO,GAAG,KAAK;UACfD,WAAW,GAAG,IAAI;QACpB,CAAC,MAAM;UACL,IAAIG,KAAK,GAAG,CAAC,EAAE;YAAE;YACfD,UAAU,GAAG,IAAI;YACjBD,OAAO,GAAG,KAAK;UACjB;UACAD,WAAW,GAAG,KAAK,CAAC,CAAC;QACvB;MACF;MACA,IAAIA,WAAW,KAAK,IAAI,EAAE;QACxB,IAAI,CAACL,iBAAiB,CAACY,IAAI,CAACC,KAAK,IAAIA,KAAK,CAACjB,IAAI,KAAKA,IAAI,CAAC,EAAE;UACzDL,OAAO,CAACC,GAAG,CAACI,IAAI,CAAC;UACjBI,iBAAiB,CAACD,IAAI,CAACH,IAAI,CAAC;QAC9B;MACF,CAAC,MAAM,IAAIU,OAAO,KAAK,IAAI,EAAE;QACzB,IAAI,CAACL,gBAAgB,CAACW,IAAI,CAACC,KAAK,IAAIA,KAAK,CAACjB,IAAI,KAAKA,IAAK,CAAC,EAAE;UACzDK,gBAAgB,CAACF,IAAI,CAAC;YAAEH,IAAI;YAAEe,MAAM,EAAE;UAAO,CAAC,CAAC;QACjD;MACJ,CAAC,MAAM,IAAIJ,UAAU,KAAK,IAAI,EAAE;QAC5B,IAAI,CAACN,gBAAgB,CAACW,IAAI,CAACC,KAAK,IAAIA,KAAK,CAACjB,IAAI,KAAKA,IAAK,CAAC,EAAE;UACzDK,gBAAgB,CAACF,IAAI,CAAC;YAAEH,IAAI;YAAEe,MAAM,EAAE;UAAc,CAAC,CAAC;QACxD;MACJ;IACF;IACAlC,cAAc,CAACwB,gBAAgB,CAAC;IAChCtB,eAAe,CAACqB,iBAAiB,CAAC;EAGpC,CAAC,EAAE,CAAC5B,QAAQ,CAAC,CAAC;EAEd,MAAM0C,iBAAiB,GAAIlB,IAAI,IAAK;IAClCf,iBAAiB,CAAC,IAAI,CAAC;IACvBE,aAAa,CAACa,IAAI,CAAC;EACrB,CAAC;EACD,MAAMmB,gBAAgB,GAAGA,CAAA,KAAM;IAC7BlC,iBAAiB,CAAC,KAAK,CAAC;EAC1B,CAAC;EAED,MAAMmC,kBAAkB,GAAG,MAAAA,CAAA,KAAY;IAErC,MAAMC,OAAO,CAACC,GAAG,CAAC5C,WAAW,CAACQ,UAAU,CAAC,CAACqC,GAAG,CAAC,MAAON,KAAK,IAAK;MAC7DtB,OAAO,CAACC,GAAG,CAACqB,KAAK,CAAC;MAClB,IAAI;QACF,MAAM1B,QAAQ,GAAG,MAAMnB,KAAK,CAACoD,MAAM,CAAE,GAAEnD,SAAU,eAAc4C,KAAK,CAACQ,EAAG,EAAC,CAAC;QAC1E9B,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAC8B,IAAI,CAACC,SAAS,CAACpC,QAAQ,CAACE,IAAI,CAAC,CAAC;QACpE;MACF,CAAC,CAAC,OAAOmC,KAAK,EAAE;QACdjC,OAAO,CAACiC,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;QAC7C;MACF;IACF,CAAC,CAAC,CAAC;IACH,IAAI;MACF,MAAMrC,QAAQ,GAAG,MAAMnB,KAAK,CAACoB,GAAG,CAAE,GAAEnB,SAAU,cAAa,CAAC;MAC5DI,WAAW,CAACc,QAAQ,CAACE,IAAI,CAAC,CAAC,CAAC;IAC9B,CAAC,CAAC,OAAOC,GAAG,EAAE;MACZC,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC;IAClB;IACAT,iBAAiB,CAAC,KAAK,CAAC;IACxBI,iBAAiB,CAAC,IAAI,CAAC;IACvBwC,UAAU,CAAC,MAAM;MACfxC,iBAAiB,CAAC,KAAK,CAAC;IAC1B,CAAC,EAAE,IAAI,CAAC;EAEV,CAAC;;EAED;EACF,oBACErB,KAAA,CAAA8D,aAAA;IAAKL,EAAE,EAAC,uBAAuB;IAAAM,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBAC7BpE,KAAA,CAAA8D,aAAA;IAAGL,EAAE,EAAC,kBAAkB;IAAAM,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAC,eAAgB,CAAC,eAC1CpE,KAAA,CAAA8D,aAAA;IAAGO,SAAS,EAAC,YAAY;IAAAN,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAC,gBAAiB,CAAC,eAC5CpE,KAAA,CAAA8D,aAAA;IAAOO,SAAS,EAAC,mBAAmB;IAAAN,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBAClCpE,KAAA,CAAA8D,aAAA;IAAOO,SAAS,EAAE,gBAAgB;IAAAN,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBAChCpE,KAAA,CAAA8D,aAAA;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBACEpE,KAAA,CAAA8D,aAAA;IAAIO,SAAS,EAAC,iBAAiB;IAAAN,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAC,MAAQ,CAAC,eACzCpE,KAAA,CAAA8D,aAAA;IAAIO,SAAS,EAAC,iBAAiB;IAAAN,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAC,QAAU,CAAC,eAC3CpE,KAAA,CAAA8D,aAAA;IAAIO,SAAS,EAAC,oBAAoB;IAAAN,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAC,aAAe,CAChD,CACC,CAAC,eACRpE,KAAA,CAAA8D,aAAA;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GACGxD,WAAW,CAAC2C,GAAG,CAAC,CAAE;IAAEvB,IAAI;IAAEe;EAAO,CAAC,kBACjC/C,KAAA,CAAA8D,aAAA;IAAIQ,GAAG,EAAEtC,IAAK;IAAA+B,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBACZpE,KAAA,CAAA8D,aAAA;IAAIO,SAAS,EAAC,gBAAgB;IAAAN,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAEpC,IAAS,CAAC,eAC1ChC,KAAA,CAAA8D,aAAA;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBACEpE,KAAA,CAAA8D,aAAA;IAAKO,SAAS,EAAC,gBAAgB;IAAAN,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAErB,MAAY,CAC3C,CAAC,eACL/C,KAAA,CAAA8D,aAAA;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBACEpE,KAAA,CAAA8D,aAAA;IAAQO,SAAS,EAAC,gBAAgB;IAACE,OAAO,EAAEA,CAAA,KAAMrB,iBAAiB,CAAClB,IAAI,CAAE;IAAA+B,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAC,OAAa,CACtF,CACF,CACL,CACI,CACF,CAAC,eAERpE,KAAA,CAAA8D,aAAA;IAAGO,SAAS,EAAC,YAAY;IAAAN,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAC,kBAAmB,CAAC,KAAC,eAC/CpE,KAAA,CAAA8D,aAAA;IAAOO,SAAS,EAAC,mBAAmB;IAAAN,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBAClCpE,KAAA,CAAA8D,aAAA;IAAOO,SAAS,EAAC,gBAAgB;IAAAN,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBAC/BpE,KAAA,CAAA8D,aAAA;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBACEpE,KAAA,CAAA8D,aAAA;IAAIO,SAAS,EAAC,iBAAiB;IAAAN,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAC,MAAQ,CAAC,eACzCpE,KAAA,CAAA8D,aAAA;IAAIO,SAAS,EAAC,iBAAiB;IAAAN,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAC,QAAU,CAAC,eAC3CpE,KAAA,CAAA8D,aAAA;IAAIO,SAAS,EAAC,oBAAoB;IAAAN,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAC,aAAe,CAChD,CACC,CAAC,eACRpE,KAAA,CAAA8D,aAAA;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GACGtD,YAAY,CAACyC,GAAG,CAAEvB,IAAI,iBACrBhC,KAAA,CAAA8D,aAAA;IAAIQ,GAAG,EAAEtC,IAAK;IAAA+B,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBACZpE,KAAA,CAAA8D,aAAA;IAAIO,SAAS,EAAC,gBAAgB;IAAAN,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAEpC,IAAS,CAAC,eAC1ChC,KAAA,CAAA8D,aAAA;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBACEpE,KAAA,CAAA8D,aAAA;IAAKO,SAAS,EAAC,gBAAgB;IAAAN,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAC,UAAa,CAC3C,CAAC,eACLpE,KAAA,CAAA8D,aAAA;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBACEpE,KAAA,CAAA8D,aAAA;IAAQO,SAAS,EAAC,gBAAgB;IAACE,OAAO,EAAEA,CAAA,KAAMrB,iBAAiB,CAAClB,IAAI,CAAE;IAAA+B,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAC,OAAa,CACtF,CACF,CACL,CACI,CACF,CAAC,EACPpD,cAAc,iBACbhB,KAAA,CAAA8D,aAAA;IAAKO,SAAS,EAAC,eAAe;IAAAN,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBAC5BpE,KAAA,CAAA8D,aAAA;IAAKO,SAAS,EAAC,eAAe;IAAAN,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBAC5BpE,KAAA,CAAA8D,aAAA;IAAIO,SAAS,EAAC,mBAAmB;IAAAN,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAE,2CAA6C,CAAC,eACjFpE,KAAA,CAAA8D,aAAA;IAAKO,SAAS,EAAC,eAAe;IAAAN,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBAC5BpE,KAAA,CAAA8D,aAAA;IAAQO,SAAS,EAAC,cAAc;IAACE,OAAO,EAAEnB,kBAAmB;IAAAW,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAC,KAAW,CAAC,eAC1EpE,KAAA,CAAA8D,aAAA;IAAQO,SAAS,EAAC,cAAc;IAACE,OAAO,EAAEpB,gBAAiB;IAAAY,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAC,IAAU,CACnE,CACF,CACF,CACN,EAEAhD,cAAc,iBACbpB,KAAA,CAAA8D,aAAA;IAAKO,SAAS,EAAC,eAAe;IAAAN,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBAC5BpE,KAAA,CAAA8D,aAAA;IAAKO,SAAS,EAAC,eAAe;IAAAN,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBAC5BpE,KAAA,CAAA8D,aAAA;IAAIO,SAAS,EAAC,mBAAmB;IAAAN,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAC,4BAA8B,CAC3D,CACF,CAER,CAAC;AAER,CAAC;AAED,eAAe9D,gBAAgB;;AAE/B;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module"}